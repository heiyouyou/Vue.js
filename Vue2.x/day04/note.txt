一、什么是组件？
组件 (Component) 是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素，Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以表现为用 is 特性进行了扩展的原生 HTML 元素。

所有的 Vue 组件同时也都是 Vue 的实例，所以可接受相同的选项对象 (除了一些根级特有的选项) 并提供相同的生命周期钩子。

二、使用组件
	1、全局注册
		要注册一个全局组件，可以使用 Vue.component(tagName, options)，例如：
		Vue.component('my-component', {
		  // 选项
		})
		组件在注册之后，便可以作为自定义元素 <my-component></my-component> 在一个实例的模板中使用。注意确保在初始化根实例之前注册组件：
		// 注册
		Vue.component('my-component', {
		  template: '<div>A custom component!</div>'
		})

		// 创建根实例
		new Vue({
		  el: '#example'
		})
	
	2、局部注册
		可以通过某个 Vue 实例/组件的实例选项 components 注册仅在其作用域中可用的组件，如：
		var Child = {
		  template: '<div>A custom component!</div>'
		}

		new Vue({
		  // ...
		  components: {
		    // <my-component> 将只在父组件模板中可用
		    'my-component': Child
		  }
		})

	3、组件注册注意点
		组件中定义数据源时，data必须是函数，即：
		Vue.component('my-component', {
			template: '<span>{{ message }}</span>',
			data(){
				return {
					message: 'hello'
				}
			}
		})

		组件注册时，模板template中的模板必须被包含在一个根元素中，即：
		Vue.component('my-component', {
			template: '<div><span>{{ message }}</span></div>',
			data(){
				return {
					message: 'hello'
				}
			}
		})
		如果是这样：template: '<div></div><span>{{ message }}</span>',则会报错。

	4、组件组合
		在 Vue 中，父子组件的关系可以总结为 prop 向下传递，事件向上传递。父组件通过 prop 给子组件下发数据，子组件通过事件给父组件发送消息。
		1.使用Prop传递数据
			组件实例的作用域是孤立的。这意味着不能 (也不应该) 在子组件的模板内直接引用父组件的数据。父组件的数据需要通过 prop 才能下发到子组件中。

		2.
			HTML 特性是不区分大小写的。所以，当使用的不是字符串模板时，camelCase (驼峰式命名)的 prop 需要转换为相对应的 kebab-case (短横线分隔式命名)：

			Vue.component('child', {
			  // 在 JavaScript 中使用 camelCase
			  props: ['myMessage'],
			  template: '<span>{{ myMessage }}</span>'
			})
			<!-- 在 HTML 中使用 kebab-case -->
			<child my-message="hello!"></child>
			如果你使用字符串模板，则没有这些限制。

		3.动态Prop
			可以用 v-bind 来动态地将 prop 绑定到父组件的数据。每当父组件的数据变化时，该变化也会传导给子组件：
			<div>
			  <input v-model="parentMsg">
			  <br>
			  <child v-bind:my-message="parentMsg"></child>
			</div>

			如果想把一个对象的所有属性作为 prop 进行传递，可以使用不带任何参数的 v-bind (即用 v-bind 而不是 v-bind:prop-name)。例如，已知一个 todo 对象：
			todo: {
				text: 'Learn Vue',
				isComplete: false
			}
			然后：
			<todo-item v-bind="todo"></todo-item>
			将等价于：
			<todo-item
			  v-bind:text="todo.text"
			  v-bind:is-complete="todo.isComplete"
			></todo-item>

		4.字面量语法传递数值
			常规的组件属性赋值：
			<comp some-prop="1"></comp>
			some-prop属性获取到的值属于字符串数字，要想获取到的是一个数字，应该使用v-bind绑定：
			<comp v-bind:some-prop="1"></comp>

		5.单向数据流
			Prop属于单向数据绑定，是单向绑定的：当父组件的属性变化时，将传导给子组件，但是反过来不会。
			另外，每次父组件更新时，子组件的所有 prop 都会更新为最新值。这意味着你不应该在子组件内部改变 prop。如果你这么做了，Vue 会在控制台给出警告。
			在两种情况下，我们很容易忍不住想去修改 prop 中数据：
				1.Prop 作为初始值传入后，子组件想把它当作局部数据来用。

					定义一个局部变量，并用 prop 的值初始化它：
					props: ['initialCounter'],
					data: function () {
					  return { counter: this.initialCounter }
					}

				2.Prop 作为原始数据传入，由子组件处理成其它数据输出。

					定义一个计算属性，处理 prop 的值并返回：
					props: ['size'],
					computed: {
					  normalizedSize: function () {
					    return this.size.trim().toLowerCase()
					  }
					}

		6.prop属性的验证
			要指定验证规则，需要用对象的形式来定义 prop，而不能用字符串数组：
			Vue.component('example', {
			  props: {
			    // 基础类型检测 (`null` 指允许任何类型)
			    propA: Number,
			    // 可能是多种类型
			    propB: [String, Number],
			    // 必传且是字符串
			    propC: {
			      type: String,
			      required: true
			    },
			    // 数值且有默认值
			    propD: {
			      type: Number,
			      default: 100
			    },
			    // 数组/对象的默认值应当由一个工厂函数返回
			    propE: {
			      type: Object,
			      default: function () {
			        return { message: 'hello' }
			      }
			    },
			    // 自定义验证函数
			    propF: {
			      validator: function (value) {
			        return value > 10
			      }
			    }
			  }
			})
			type 可以是下面原生构造器：
				String
				Number
				Boolean
				Function
				Object
				Array
				Symbol
			type 也可以是一个自定义构造器函数，使用 instanceof 检测。
			当 prop 验证失败，Vue 会抛出警告 (如果使用的是开发版本)。注意 prop 会在组件实例创建之前进行校验，所以在 default 或 validator 函数里，诸如 data、computed 或 methods 等实例属性还无法使用。

			