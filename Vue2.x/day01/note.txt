一、Vue2 入门
	1.安装：
		可以使用node的包管理工具下载 npm install vue (最新稳定版，推荐)，就可以使用script标签引入，如：
		<script type="text/javascript" src="./node_modules/vue/dist/vue.js"></script>
		或者cdn引入
		<script src="https://cdn.jsdelivr.net/npm/vue"></script>
	2.调试工具扩展
		如果是使用Chrome浏览器调试，可以使用该工具集成到浏览器中调试：https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd，记住在浏览器程序扩展面板中勾选文件协议可访问，该工具才可以使用。

二、Vue2 实例
	var vm = new Vue({

	})

	1.选项
		# data
		类型：Object | Function
		限制：组件的定义只接受Function。
		详细:
			对象必须是纯粹的对象 (含有零个或多个的 key/value 对)，即是浏览器API创建的原生对象。
		值得注意的是只有当实例被创建时 data中存在的属性才是响应式的。也就是说如果后面再添加一个新的属性，是不会触发任何	视图上更新的。建议初始创建实例时，就应该为需要使用到的属性设置初始值。
			实例创建之后，可以通过 vm.$data 访问原始数据对象。Vue 实例也代理了 data 对象上所有的属性，因此访问 vm.a 等价于访问 vm.$data.a。
			以 _ 或 $ 开头的属性不会被 Vue 实例代理，因为它们可能和 Vue 内置的属性、API 方法冲突。你可以使用例如：vm.$data._property 的方式访问这些属性。
			当一个组件被定义，data 必须声明为返回一个初始数据对象的函数，因为组件可能被用来创建多个实例。如果 data 仍然是一个纯粹的对象，则所有的实例将共享引用同一个数据对象！通过提供 data 函数，每次创建一个新实例后，我们能够调用 data 函数，从而返回初始数据的一个全新副本数据对象。
			注意，不应该对 data 属性使用箭头函数 (例如data: () => { return { a: this.myProp }})。理由是箭头函数绑定了父级作用域的上下文，所以 this 将不会按照期望指向 Vue 实例，this.myProp 将是 undefined。

		# methods
		类型：{ [key: string]: Function }
		详细：
			methods 将被混入到 Vue 实例中。可以直接通过 VM 实例访问这些方法，或者在指令表达式中使用。方法中的 this 自动绑定为 Vue 实例。
			注意，不应该使用箭头函数来定义 method 函数 (例如 plus: () => this.a++)。理由是箭头函数绑定了父级作用域的上下文，所以 this 将不会按照期望指向 Vue 实例，this.a 将是 undefined。

	2.实例属性
		# vm.$data
			类型：Object
			详细：
			Vue 实例观察的数据对象。Vue实例代理了对其 data 对象属性的访问。

		# vm.$el
			类型：HTMLElement
			只读
			详细：
			Vue 实例使用的根 DOM 元素。

		vm.$options
			类型：Object
			只读
			详细：
			用于当前 Vue 实例的初始化选项。需要在选项中包含自定义属性时会有用处：
				var vm = new Vue({
				  customOption: 'foo',
				  created: function () {
				    console.log(this.$options.customOption) // => 'foo'
				  }
				})
				vm.$options

	3.生命周期钩子
		每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。
		所有的生命周期钩子自动绑定 this 上下文到实例中，因此你可以访问数据，对属性和方法进行运算。这意味着 你不能使用箭头函数来定义一个生命周期方法 (例如 created: () => this.fetchTodos())。这是因为箭头函数绑定了父级作用域的上下文，因此 this 与你期待的 Vue 实例不同，this.fetchTodos 的行为未定义。

		# beforeCreate
			类型：Function
			详细：
			在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。

		# created
			类型：Function
			详细：
			在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，属性和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。

		# beforeMount
			类型：Function
			详细：
			在挂载开始之前被调用：相关的 render 函数首次被调用。
			该钩子在服务器端渲染期间不被调用
		# mounted
			类型：Function
			详细：
			el 被新创建的 vm.$el 符替换，并挂载到实例上去之后调用该钩子。如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档内。
			注意 mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.$nextTick 替换掉 mounted：	

		# beforeUpdate
			类型：Function
			详细：
			数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。
			你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。
			该钩子在服务器端渲染期间不被调用。

		# updated
			类型：Function
			详细：
			由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。

			当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态。如果要相应状态改变，通常最好使用计算属性或 watcher 取而代之。
			注意 updated 不会承诺所有的子组件也都一起被重绘。如果你希望等到整个视图都重绘完毕，可以用 vm.$nextTick 替换掉 updated：

		# activated
			类型：Function
			详细：
			keep-alive 组件激活时调用。
			该钩子在服务器端渲染期间不被调用。
		
		# deactivated
			类型：Function
			详细：
			keep-alive 组件停用时调用。
			该钩子在服务器端渲染期间不被调用。
			
		# beforeDestroy
			类型：Function
			详细：
			实例销毁之前调用。在这一步，实例仍然完全可用。
			该钩子在服务器端渲染期间不被调用。

		# destroyed
			类型：Function
			详细：
			Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。
			该钩子在服务器端渲染期间不被调用。	

	4.生命周期的实例方法
		# vm.$mount( [elementOrSelector] )
			参数：
			{Element | string} [elementOrSelector]
			{boolean} [hydrating]
			返回值：vm - 实例自身
			用法：
			如果 Vue 实例在实例化时没有收到 el 选项，则它处于“未挂载”状态，没有关联的 DOM 元素。可以使用 vm.$mount() 手动地挂载一个未挂载的实例。
			如果没有提供 elementOrSelector 参数，模板将被渲染为文档之外的的元素，并且你必须使用原生 DOM API 把它插入文档中。
			这个方法返回实例自身，因而可以链式调用其它实例方法。
			示例：
				var MyComponent = Vue.extend({
				  template: '<div>Hello!</div>'
				})

				// 创建并挂载到 #app (会替换 #app)
				new MyComponent().$mount('#app')

				// 同上
				new MyComponent({ el: '#app' })

				// 或者，在文档之外渲染并且随后挂载
				var component = new MyComponent().$mount()
				document.getElementById('app').appendChild(component.$el)

		# vm.$destroy()
			用法：
			完全销毁一个实例。清理它与其它实例的连接，解绑它的全部指令及事件监听器。
			触发 beforeDestroy 和 destroyed 的钩子。
			在大多数场景中你不应该调用这个方法。最好使用 v-if 和 v-for 指令以数据驱动的方式控制子组件的生命周期。

三、模板语法
	Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。所有 Vue.js 的模板都是合法的 HTML ，所以能被遵循规范的浏览器和 HTML 解析器解析。
	在底层的实现上，Vue 将模板编译成虚拟 DOM 渲染函数。结合响应系统，在应用状态改变时，Vue 能够智能地计算出重新渲染组件的最小代价并应用到 DOM 操作上。
	如果你熟悉虚拟 DOM 并且偏爱 JavaScript 的原始力量，你也可以不用模板，直接写渲染 (render) 函数，使用可选的 JSX 语法。

	1.插值
		文本：
			双括号插值：{{}}
			<span>Message: {{ msg }}</span>
			使用 v-once 指令，只执行一次性地插值，当数据改变时，插值处的内容不会更新。
			<span v-once>这个将不会改变: {{ msg }}</span>
		原始HTML：
			输出真正的 HTML，需要使用 v-html 指令：
			<p>Using v-html directive: <span v-html="rawHtml"></span></p>
	
	2.特性
		使用v-bind指令绑定特性：
		<div v-bind:id="dynamicId"></div>
		注意：指令中特性的值一定已经通过data数据项进行定义好。

	3.使用Javascript表达式
		可以在插值符{{}}、指令中使用单个表达式进行js执行，如：
		{{ number + 1 }}
		{{ ok ? 'YES' : 'NO' }}
		{{ message.split('').reverse().join('') }}
		<div v-bind:id="'list-' + id"></div>

		<!-- 这是语句，不是表达式 -->
		{{ var a = 1 }}

		<!-- 流控制也不会生效，请使用三元表达式 -->
		{{ if (ok) { return message } }}
		一些js原生API中的全局变量和对象也可以在Vue中的指令、插值符使用。

	4.指令
		指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。

		# v-text
		预期：string
		详细：
		更新元素的 textContent。如果要更新部分的 textContent ，需要使用 {{ Mustache }} 插值。

		# v-html
		预期：string
		详细：
		更新元素的 innerHTML 。注意：内容按普通 HTML 插入 - 不会作为 Vue 模板进行编译。如果试图使用 v-html 组合模板，可以重新考虑是否通过使用组件来替代。

		# v-show
		预期：any
		用法：
		根据表达式之真假值，切换元素的 display CSS 属性。
		当条件变化时该指令触发过渡效果。

		# v-if、v-else-if、v-else
		类型：any
		限制：v-else-if前一兄弟元素必须有 v-if 或 v-else-if，v-else前一兄弟元素必须有 v-if 或 v-else-if。
		如：
			<div v-if="type === 'A'">
			  A
			</div>
			<div v-else-if="type === 'B'">
			  B
			</div>
			<div v-else-if="type === 'C'">
			  C
			</div>
			<div v-else>
			  Not A/B/C
			</div>

		# v-for
			预期：Array | Object | number | string
			用法：
			必须使用特定语法 alias in expression ，为当前遍历的元素提供别名：
				<div v-for="item in items">{{item}}</div>
				<div v-for="(item, index) in items">{{item}}--{{index}}</div>
				<div v-for="(val, key) in object">{{key}}--{{val}}</div>
				<div v-for="(val, key, index) in object">{{key}}--{{val}}--{{index}}</div>
				
			可以用 of 替代 in 作为分隔符，因为它是最接近 JavaScript 迭代器的语法：
				<div v-for="item of items"></div>

			为了能跟踪到每个节点的身份，并重用和重新排序现有元素，需要为每项提供一个唯一 key属性。这个特殊的属性相当于 Vue 1.x 的 track-by ，但它的工作方式类似于一个属性，所以你需要用 v-bind 来绑定动态值 (在这里使用简写)：
			<div v-for="item in items" :key="item.id">
				{{ item.text }}
			</div>

		# v-on
			缩写：@
			类型：Function | Inline Statement | Object
			参数：event
			修饰符：
				.stop - 调用 event.stopPropagation()。
				.prevent - 调用 event.preventDefault()。
				.capture - 添加事件侦听器时使用 capture 模式。
				.self - 只当事件是从侦听器绑定的元素本身触发时才触发回调。
				.{keyCode | keyAlias} - 只当事件是从特定键触发时才触发回调。
				.native - 监听组件根元素的原生事件。
				.once - 只触发一次回调。
				.left - (2.2.0) 只当点击鼠标左键时触发。
				.right - (2.2.0) 只当点击鼠标右键时触发。
				.middle - (2.2.0) 只当点击鼠标中键时触发。
				.passive - (2.3.0) 以 { passive: true } 模式添加侦听器
			用法：
				绑定事件监听器。事件类型由参数指定。表达式可以是一个方法的名字或一个内联语句，如果没有修饰符也可以省略。
				从 2.4.0 开始，v-on 同样支持不带参数绑定一个事件/监听器键值对的对象。注意当使用对象语法时，是不支持任何修饰器的。

				用在普通元素上时，只能监听原生DOM 事件。用在自定义元素组件上时，也可以监听子组件触发的自定义事件。
				在监听原生 DOM 事件时，方法以事件为唯一的参数。如果使用内联语句，语句可以访问一个 $event 属性：v-on:click="handle('ok', $event)"。

		# v-bind
			缩写：:
			预期：any (with argument) | Object (without argument)
			参数：attrOrProp (optional)
			修饰符：
			.prop - 被用于绑定 DOM 属性 (property)。
			.camel - (2.1.0+) 将 kebab-case 特性名转换为 camelCase. (从 2.1.0 开始支持)
			.sync (2.3.0+) 语法糖，会扩展成一个更新父组件绑定值的 v-on 侦听器。
			用法：
				动态地绑定一个或多个特性，或一个组件 prop 到表达式。
				在绑定 class 或 style 特性时，支持其它类型的值，如数组或对象。
				在绑定 prop 时，prop 必须在子组件中声明。可以用修饰符指定不同的绑定类型。
				没有参数时，可以绑定到一个包含键值对的对象。注意此时 class 和 style 绑定不支持数组和对象。
		
		# v-model
			v-model
			预期：随表单控件类型不同而不同。
			限制：
				<input>
				<select>
				<textarea>
				components
			修饰符：
				.lazy - 取代input监听，改为change事件监听数据
				.number - 输入字符串转为数字
				.trim - 输入首尾空格过滤
			v-model会忽略所有表单元素的 value、checked、selected 特性的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 data 选项中声明初始值。
		
		# v-pre
			不需要表达式
			用法：
			跳过这个元素和它的子元素的编译过程。可以用来显示原始 Mustache 标签。跳过大量没有指令的节点会加快编译。
		
		# v-once
			不需要表达式
			详细：
			只渲染元素和组件一次。随后的重新渲染，元素组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。
		
		# v-cloak
			不需要表达式
			用法：
			这个指令保持在元素上直到关联实例结束编译。和CSS规则如 [v-cloak] { display: none } 一起用时，这个指令可以隐藏未编译的 Mustache 标签直到实例准备完毕。
			示例：
			[v-cloak] {
			  display: none;
			}
			<div v-cloak>
			  {{ message }}
			</div>
			不会显示，直到编译结束。（可以用来解决 {{ }} 插值符在未完全渲染时，进行隐藏提升体验）