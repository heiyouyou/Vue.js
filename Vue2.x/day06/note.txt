
一、组件
	1、子组件引用
		需要在 JavaScript 中直接访问子组件。可以使用 ref 为子组件指定一个引用 ID。例如：
		<div id="parent">
		  <user-profile ref="profile"></user-profile>
		</div>
		var parent = new Vue({ el: '#parent' })
		// 访问子组件实例
		var child = parent.$refs.profile
		当 ref 和 v-for 一起使用时，获取到的引用会是一个数组所有对应的子组件。
		
		注意：
			$refs 只在组件渲染完成后才填充，并且它是非响应式的。它仅仅是一个直接操作子组件的应急方案——应当避免在模板或计算属性中使用 $refs。

	2、组件命名约定
		当注册组件 (或者 prop) 时，可以使用 kebab-case (短横线分隔命名)、camelCase (驼峰式命名) 或 PascalCase (单词首字母大写命名)。
		其中 PascalCase 是最通用的声明约定而 kebab-case 是最通用的使用约定。
		如果组件未经 slot 元素传入内容，你甚至可以在组件名后使用 / 使其自闭合：
			<my-component/>
		当然，这只在字符串模板中有效。因为自闭的自定义元素是无效的 HTML，浏览器原生的解析器也无法识别它。

	3、内联模板
		如果子组件有 inline-template 特性，组件将把它的内容当作它的模板，而不是把它当作分发内容。这让模板编写起来更灵活。
		<my-component inline-template>
		  <div>
		    <p>这些将作为组件自身的模板。</p>
		    <p>而非父组件透传进来的内容。</p>
		  </div>
		</my-component>
		但是 inline-template 让模板的作用域难以理解。使用 template 选项在组件内定义模板或者在 .vue 文件中使用 template 元素才是最佳实践。

	4、X-Template
		另一种定义模板的方式是在 JavaScript 标签里使用 text/x-template 类型，并且指定一个 id。例如：
		<script type="text/x-template" id="hello-world-template">
		  <p>Hello hello hello</p>
		</script>
		Vue.component('hello-world', {
		  template: '#hello-world-template'
		})
		这在有很多大模板的演示应用或者特别小的应用中可能有用，其它场合应该避免使用，因为这将模板和组件的其它定义分离了。

	5、对低开销的静态组件使用 v-once
		尽管在 Vue 中渲染 HTML 很快，不过当组件中包含大量静态内容时，可以考虑使用 v-once 将渲染结果缓存起来，就像这样：
		Vue.component('terms-of-service', {
		  template: '\
		    <div v-once>\
		      <h1>Terms of Service</h1>\
		      ...很多静态内容...\
		    </div>\
		  '
		})

	6、组件全局注册
		Vue.component('my-component-name', {
		  // ... 选项 ...
		})
		这些组件是全局注册的。也就是说它们在注册之后可以用在任何新创建的 Vue 根实例 (new Vue) 的模板中。
		在所有子组件中各自内部也都可以相互使用。
		全局注册的行为必须在根 Vue 实例 (通过 new Vue) 创建之前发生

	7、组件局部注册
		可以通过一个普通的 JavaScript 对象来定义组件：
		var ComponentA = { /* ... */ }
		var ComponentB = { /* ... */ }
		var ComponentC = { /* ... */ }
		然后在 components 选项中定义你想要使用的组件：

		new Vue({
		  el: '#app'
		  components: {
		    'component-a': ComponentA,
		    'component-b': ComponentB
		  }
		})
		对于 components 对象中的每个属性来说，其属性名就是自定义元素的名字，其属性值就是这个组件的选项对象。
		注意：局部注册的组件在其子组件中不可用。

		如果希望 ComponentA 在 ComponentB 中可用，则需要这样写：
		var ComponentA = { /* ... */ }
		var ComponentB = {
		  components: {
		    'component-a': ComponentA
		  },
		  // ...
		}

二、过渡和动画
	1、单元素/组件的过渡
	Vue 提供了 transition 的封装组件，在下列情形中，可以给任何元素和组件添加 entering/leaving 过渡：
		条件渲染 (使用 v-if)
		条件展示 (使用 v-show)
		动态组件
		组件根节点

		1.当插入或删除包含在 transition 组件中的元素时，Vue 将会做以下处理：
			自动嗅探目标元素是否应用了 CSS 过渡或动画，如果是，在恰当的时机添加/删除 CSS 类名。
			如果过渡组件提供了 JavaScript 钩子函数，这些钩子函数将在恰当的时机被调用。
			如果没有找到 JavaScript 钩子并且也没有检测到 CSS 过渡/动画，DOM 操作 (插入/删除) 在下一帧中立即执行。

		2.过渡的类名
			在进入/离开的过渡中，会有 6 个 class 切换。
			v-enter：定义进入过渡的开始状态。在元素被插入时生效，在下一个帧移除。
			v-enter-active：定义过渡的状态。在元素整个过渡过程中作用，在元素被插入时生效，在 transition/animation 完成之后移除。这个类可以被用来定义过渡的过程时间，延迟和曲线函数。
			v-enter-to: 2.1.8版及以上 定义进入过渡的结束状态。在元素被插入一帧后生效 (与此同时 v-enter 被删除)，在 transition/animation 完成之后移除。
			v-leave: 定义离开过渡的开始状态。在离开过渡被触发时生效，在下一个帧移除。
			v-leave-active：定义过渡的状态。在元素整个过渡过程中作用，在离开过渡被触发后立即生效，在 transition/animation 完成之后移除。这个类可以被用来定义过渡的过程时间，延迟和曲线函数。
			v-leave-to: 2.1.8版及以上 定义离开过渡的结束状态。在离开过渡被触发一帧后生效 (与此同时 v-leave 被删除)，在 transition/animation 完成之后移除。
			对于这些在 enter/leave 过渡中切换的类名，v- 是这些类名的前缀。使用 <transition name="my-transition"> 可以重置前缀，比如 v-enter 替换为 my-transition-enter。

		3.对于Css3动画 animation 的使用同样是在transition组件中调用，其区别 transition于在动画中 v-enter 类名在节点插入 DOM 后不会立即删除，而是在 animationend 事件触发时删除。

		4.自定义过渡的类名
			通过以下特性来自定义过渡类名：
			enter-class
			enter-active-class
			enter-to-class (2.1.8+)
			leave-class
			leave-active-class
			leave-to-class (2.1.8+)
			他们的优先级高于普通的类名，这对于 Vue 的过渡系统和其他第三方 CSS 动画库，如 Animate.css 结合使用十分有用。

		5.可以在transition属性中声明 JavaScript 钩子
			<transition
			  v-on:before-enter="beforeEnter"
			  v-on:enter="enter"
			  v-on:after-enter="afterEnter"
			  v-on:enter-cancelled="enterCancelled"

			  v-on:before-leave="beforeLeave"
			  v-on:leave="leave"
			  v-on:after-leave="afterLeave"
			  v-on:leave-cancelled="leaveCancelled"
			>
			  <!-- ... -->
			</transition>
			注意：
				1）当只用 JavaScript 过渡的时候， 在 enter 和 leave 中，回调函数 done 是必须的 。否则，它们会被同步调用，过渡会立即完成。
				2）推荐对于仅使用 JavaScript 过渡的元素添加 v-bind:css="false"，Vue 会跳过 CSS 的检测。这也可以避免过渡过程中 CSS 的影响。

		6.过渡模式
			<transition> 的默认行为 - 进入和离开同时发生。
			Vue 提供了 过渡模式:
				1）in-out：新元素先进行过渡，完成之后当前元素过渡离开。
				2）out-in：当前元素先进行过渡，完成之后新元素过渡进入。

		7.列表过渡
			使用 <transition-group> 组件几个特点：
			1）不同于 <transition>，它会以一个真实元素呈现：默认为一个 <span>。你也可以通过 tag 特性更换为其他元素。
			2）内部元素 总是需要 提供唯一的 key 属性值。