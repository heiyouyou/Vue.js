一、混入
	混入 (mixins) 是一种分发 Vue 组件中可复用功能的非常灵活的方式。混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被混入该组件本身的选项。
	1、选项合并
		1.数据对象在内部会进行浅合并 (一层属性深度)，在和组件的数据发生冲突时以组件数据优先。
		2.同名钩子函数将混合为一个数组，因此都将被调用。另外，混入对象的钩子将在组件自身钩子之前调用。
		3.值为对象的选项，例如 methods, components 和 directives，将被混合为同一个对象。两个对象键名冲突时，取组件对象的键值对。 

	2、全局混入
	也可以全局注册混入对象。注意使用！ 一旦使用全局混入对象，将会影响到所有之后创建的 Vue 实例。使用恰当时，可以为自定义对象注入处理逻辑。


二、自定义指令
	注册一个全局自定义指令 `v-focus`
		Vue.directive('focus', {
		  // 当被绑定的元素插入到 DOM 中时……
		  inserted: function (el) {
		    // 聚焦元素
		    el.focus()
		  }
		})
	或者在组件的配置项 directives 中定义：
		directives: {
		  focus: {
		    // 指令的定义
		    inserted: function (el) {
		      el.focus()
		    }
		  }
		} 
	1、自定义指令的钩子函数
		bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。

		inserted：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。

		update：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)。

		componentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用。

		unbind：只调用一次，指令与元素解绑时调用。
	2、自定义指令的钩子函数参数(即 el、binding、vnode 和 oldVnode)
		指令钩子函数会被传入以下参数：
		el：指令所绑定的元素，可以用来直接操作 DOM 。
		binding：一个对象，包含以下属性：
			name：指令名，不包括 v- 前缀。
			value：指令的绑定值，例如：v-my-directive="1 + 1" 中，绑定值为 2。
			oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。
			expression：字符串形式的指令表达式。例如 v-my-directive="1 + 1" 中，表达式为 "1 + 1"。
			arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 "foo"。
			modifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 { foo: true, bar: true }。
			vnode：Vue 编译生成的虚拟节点。移步 VNode API 来了解更多详情。
			oldVnode：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。
		注意：除了 el 之外，其它参数都应该是只读的，切勿进行修改。如果需要在钩子之间共享数据，建议通过元素的 dataset 来进行。

	3、函数简写
		如果需要 bind 和 update 同时触发相同行为，而不关心其它的钩子。可以这样写:
		Vue.directive('color-swatch', function (el, binding) {
		  el.style.backgroundColor = binding.value
		})

三、渲染函数render
	字符串模板的代替方案，允许你发挥 JavaScript 最大的编程能力。该渲染函数接收一个 createElement 方法作为第一个参数用来创建 VNode。
	Vue 选项中的 render 函数若存在，则 Vue 构造函数不会从 template 选项或通过 el 选项指定的挂载元素中提取出的 HTML 模板编译渲染函数。

	1、createElement函数的参数
		createElement 接受的参数：
		// @returns {VNode}
		createElement(
		  // {String | Object | Function}
		  // 一个 HTML 标签字符串，组件选项对象，或者
		  // 解析上述任何一种的一个 async 异步函数，必要参数。
		  'div',

		  // {Object}
		  // 一个包含模板相关属性的数据对象
		  // 这样，您可以在 template 中使用这些属性。可选参数。
		  {

		  },

		  // {String | Array}
		  // 子节点 (VNodes)，由 `createElement()` 构建而成，
		  // 或使用字符串来生成“文本节点”。可选参数。
		  [
		    '先写一些文字',
		    createElement('h1', '一则头条'),
		    createElement(MyComponent, {
		      props: {
		        someProp: 'foobar'
		      }
		    })
		  ]
		)
	2、createElement函数的参数的 data 对象
		在 VNode 数据对象中，下列属性名是级别最高的字段。该对象也允许你绑定普通的 HTML 特性，就像 DOM 属性一样，比如 innerHTML (这会取代 v-html 指令)。
		{
		  // 和`v-bind:class`一样的 API
		  'class': {
		    foo: true,
		    bar: false
		  },
		  // 和`v-bind:style`一样的 API
		  style: {
		    color: 'red',
		    fontSize: '14px'
		  },
		  // 正常的 HTML 特性
		  attrs: {
		    id: 'foo'
		  },
		  // 组件 props
		  props: {
		    myProp: 'bar'
		  },
		  // DOM 属性
		  domProps: {
		    innerHTML: 'baz'
		  },
		  // 事件监听器基于 `on`
		  // 所以不再支持如 `v-on:keyup.enter` 修饰器
		  // 需要手动匹配 keyCode。
		  on: {
		    click: this.clickHandler
		  },
		  // 仅对于组件，用于监听原生事件，而不是组件内部使用
		  // `vm.$emit` 触发的事件。
		  nativeOn: {
		    click: this.nativeClickHandler
		  },
		  // 自定义指令。注意，你无法对 `binding` 中的 `oldValue`
		  // 赋值，因为 Vue 已经自动为你进行了同步。
		  directives: [
		    {
		      name: 'my-custom-directive',
		      value: '2',
		      expression: '1 + 1',
		      arg: 'foo',
		      modifiers: {
		        bar: true
		      }
		    }
		  ],
		  // Scoped slots in the form of
		  // { name: props => VNode | Array<VNode> }
		  scopedSlots: {
		    default: props => createElement('span', props.text)
		  },
		  // 如果组件是其他组件的子组件，需为插槽指定名称
		  slot: 'name-of-slot',
		  // 其他特殊顶层属性
		  key: 'myKey',
		  ref: 'myRef'
		}
	3、VNodes 必须唯一
		组件树中的所有 VNodes 必须是唯一的。
	4、将 h 作为 createElement 的别名是 Vue 生态系统中的一个通用惯例，实际上也是 JSX 所要求的，如果在作用域中 h 失去作用，在应用中会触发报错。

四、过滤器
	过滤器可以用在两个地方：双花括号插值和 v-bind 表达式。过滤器应该被添加在 JavaScript 表达式的尾部，由“|”符号指示：
	<!-- 在双花括号中 -->
	{{ message | capitalize }}

	<!-- 在 `v-bind` 中 -->
	<div v-bind:id="rawId | formatId"></div>

	过滤器函数总接收表达式的值 (之前的操作链的结果) 作为第一个参数。在上述例子中，capitalize 过滤器函数将会收到 message 的值作为第一个参数。
	
	1、定义过滤器
		可以在一个组件的选项中定义本地的过滤器：
		filters: {
		  capitalize: function (value) {
		    if (!value) return ''
		    value = value.toString()
		    return value.charAt(0).toUpperCase() + value.slice(1)
		  }
		}
		或者在创建 Vue 实例之前全局定义过滤器：
		Vue.filter('capitalize', function (value) {
		  if (!value) return ''
		  value = value.toString()
		  return value.charAt(0).toUpperCase() + value.slice(1)
		})

		new Vue({
		  // ...
		})
	2、过滤器可以串联
		{{ message | filterA | filterB }}
		在这个例子中，filterA 被定义为接收单个参数的过滤器函数，表达式 message 的值将作为参数传入到函数中。然后继续调用同样被定义为接收单个参数的过滤器函数 filterB，将 filterA 的结果传递到 filterB 中。

	3、过滤器是 JavaScript 函数，因此可以接收参数
		{{ message | filterA('arg1', arg2) }}
		这里，filterA 被定义为接收三个参数的过滤器函数。其中 message 的值作为第一个参数，普通字符串 'arg1' 作为第二个参数，表达式 arg2 的值作为第三个参数。